---
title: "Running Time Analsis: Experimental Evaluation"
echo: true
description: "How do you use experiments to measure the performance of a Python program?"
date: "2024-02-12"
date-format: long
author: Gregory M. Kapfhammer
format:
  revealjs:
    theme: default
    css: styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Algorithmology"
---

# Programmers must write programs that are *correct*, *efficient*, and *maintainable*

::: incremental

- **Prior Focus**: is the program implemented correctly?
- **New Focus**: does the program have acceptable performance?

:::

## Programmers often ask "does your program have good performance?" Here are some common answers!

::: {.incremental .fade-right}

- "Yes, it was fast enough on my laptop"
- "I think it is fast enough for most users"
- "I don't know, I never measured its performance"
- "It is really fast if you run it on an Apple M3 chip"
- "Let's wait for our user's to tell us if it is fast enough"
- "One function is too slow --- and I think we rarely use it"

:::

## A two-week road map for exploring Python program performance

::: {.fragment .fade-right style="margin-top: 0.25em; font-size: 0.95em;"}

- Week 1: **Empirical Evaluation of Running Time**

    - How do you conduct timing experiments to measure the performance of a
    real Python programs?

- Week 2: **Analytical Evaluation of Time Complexity**

    - How do you use an instruction cost model to prove that it belongs to a
    specific time complexity class?

:::

::: {.fragment .fade .boxed-content style="margin-top: -0.25em; font-size: 0.9em;"}

**Ultimate goal**: create a nuanced description of program efficiency that
adapts to *different inputs* and to *different computers*

:::

## Algorithm analysis challenges 

::: {.columns style="margin-top: 1.25em;"}

::: {.fragment .column .fade width="50%" style="margin-top: 0.25em;"}

### Different Inputs

- Varying sizes of input data
- Different types of data
- Degrees of sortedness
- Degrees of duplication
- Different data distributions

:::

::: {.fragment .column width="50%" style="margin-top: 0.25em;"}

### Different Computers

- Diverse hardware setups
- Varying system performance
- Diverse system building
- Different operating systems
- Variation in system load

:::

:::

::: {.fragment .fade .boxed-content style="margin-top: -0.25em; font-size: 0.9em;"}

**Ultimate goal**: experimental and analytical evaluation methods that yield
actionable insights that support *understanding* and *prediction*

:::

# Practical methods for measuring the running time of a program

::: {.fragment .fade-right}

- Implement as a Python function with inputs and outputs
- Use the `time` module to measure running time on inputs
- Study trade-offs associated with different implementations

:::

## Performance of a duplicate detector

```{python}
from typing import List
def duplicates(input_list: List[int]):
    n = len(input_list)
    for i in range(n):
        for j in range(n):
            if i != j and input_list[i] == input_list[j]:
                return True
    return False

assert(duplicates([1,2,6,3,4,5,6,7,8]))
assert(not duplicates([1,2,3,4]))
print(duplicates([1,2,6,3,4,5,6,7,8]))
print(not duplicates([1,2,3,4]))
```

::: {.fragment .fade-left style="margin-top: -0.25em; font-size: 0.9em;"}

- Returns `True` if there are any duplicates and `False` otherwise
- What is the performance of the `duplicates` function? Why?

:::

## Best practices for software testing

::: {.fragment .fade-right}

- Answer the following questions when testing:
    - Does the program meet its specification?
    - After changing the program, does it still work correctly?
- Using assertion statements:
    - `print` statements require manual checking of output
    - `assert` statements automatically checks correctness
- Use a testing framework like `pytest` or `unittest`
- Assess the adequacy of the test suite with `coverage.py`

:::

## What are the performance trade-offs associated with software testing?

::: {.fragment .fade-right style="margin-top: 0.25em; font-size: 0.95em;"}

- Questions to consider when performing software testing:
    - When should you run the test suite?
    - How frequently should you run the test suite?
    - How can you reduce the cost of:
        - ... test execution?
        - ... coverage monitoring?
        - ... mutation testing?
- How do you balance the costs and benefits of software testing?

:::
