---
title: "Running Time Analsis: Experimental Evaluation"
echo: true
description: "How do you use experiments to measure the performance of a Python program?"
date: "2024-02-12"
date-format: long
author: Gregory M. Kapfhammer
format:
  revealjs:
    theme: default
    css: styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Algorithmology"
---

# Programmers must write programs that are *correct*, *efficient*, and *maintainable*

::: incremental

- **Prior Focus**: is the program implemented correctly?
- **New Focus**: does the program have adequate performance?

:::

## By running a program and checking its output software testing establishes a confidence in its correctness

::: {.fragment .fade-right}

- Steps during software testing:
    - Create an input for the program
    - Setup the program's environment
    - Pass the input to the program
    - Collect the output from the program
    - Compare the output to the expected output

:::

## How would you test the `Doubler`?

```{python}
class Doubler:
    def __init__(self, n):
        self._n = 2 * n

    def n(self):
        return self._n

x = Doubler(5)
print(x.n() == 10)
assert(x.n() == 10)
y = Doubler(-4)
print(y.n() == -8)
assert(y.n() == -8)
```

::: {.fragment .fade-left style="margin-top: -0.25em; font-size: 0.9em;"}

- Establishes a confidence in the correctness of the `Doubler` class
- When testing is it better to use `print` or `assert` statements?

:::

## Best practices for software testing

::: {.fragment .fade-right}

- Answer the following questions when testing:
    - Does the program meet its specification?
    - After changing the program, does it still work correctly?
- Using assertion statements:
    - `print` statements require manual checking of output
    - `assert` statements automatically checks correctness
- Use a testing framework like `pytest` or `unittest`
- Assess the adequacy of the test suite with `coverage.py`

:::

## What are the performance trade-offs associated with software testing?

::: {.fragment .fade-right style="margin-top: 0.25em; font-size: 0.95em;"}

- Questions to consider when performing software testing:
    - When should you run the test suite?
    - How frequently should you run the test suite?
    - How can you reduce the cost of:
        - ... test execution?
        - ... coverage monitoring?
        - ... mutation testing?
- How do you balance the costs and benefits of software testing?

:::
