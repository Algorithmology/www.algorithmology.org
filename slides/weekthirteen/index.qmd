---
title: "Hierarchical Data Structures"
echo: true
description: "How do you create and navigate tree structures?"
date: "2024-04-08"
date-format: long
author: Gregory M. Kapfhammer
execute:
  freeze: auto
format:
  revealjs:
    theme: default
    css: styles.css
    monofont: Ubuntu Mono
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    html-math-method: mathjax
    footer: "Algorithmology"
---

# Why do we need tree data structures?

::: incremental

- Natural representation of hierarchical relationships
- Useful way to track the execution of a program
- Efficient representation of recursive data
- Best representation for data stored in file system

:::

::: {.fragment .fade}

{{< iconify game-icons team-idea >}} **What are examples of data we can store in a tree?**

:::

## Traversing a Primitive Tree

```{python}
def printtree(T):
    print(T[0])
    for child in range(1, len(T)):
        printtree(T[child])

T = ['c', ['a', ['p'], ['n'], ['t']], ['o', ['n']]]
print(T)
printtree(T)
```

::: {.incremental style="margin-top: -0.5em"}

- Represent the tree through a list of nested lists
- Use a recursive function to traverse the tree

:::

## Using an Iterator with a primitive tree

```{python}
def printtree(T):
    iterator = iter(T)
    print(next(iterator))
    for child in iterator:
        printtree(child)

T = ['c', ['a', ['p'], ['n'], ['t']], ['o', ['n']]]
print(T)
printtree(T)
```

::: {.incremental style="margin-top: -0.5em; font-size: 0.90em"}

- Use an iterator to traverse the tree
- Simplifies the code and makes it more readable

:::

## Let's make with a complete implementation of the `Tree`!

::: fragment

- Create a complete tree class to illustrate concept
- Tree will take as input a list of lists of `int` values
- Each individual value will be a single node
- The nesting of the lists will represent tree depth
- The `Tree` will leverage the previously created `Queue`

:::

::: fragment

```python
# create two trees using the "list of lists" approach
T_simple = Tree([1, [2], [3, [4]]])
T_complex = Tree([1, [2, [3], [4]], [5],[6],[7,[8],[9], [10,[11]]]])
print(T_simple)
print(T_complex)
```

:::

## Revisiting the Queue

```{python}
class ListQueueSimple:
    def __init__(self):
        self._L = []

    def enqueue(self, item):
        self._L.append(item)

    def dequeue(self):
        return self._L.pop(0)

    def peek(self):
        return self._L[0]

    def __len__(self):
        return len(self._L)

    def isempty(self):
        return len(self) == 0

class ListQueueFakeDelete:
    def __init__(self):
        self._head = 0
        self._L = []

    def enqueue(self, item):
        self._L.append(item)

    def peek(self):
      return self._L[self._head]

    def dequeue(self):
        item = self.peek()
        self._head += 1
        return item

    def __len__(self):
        return len(self._L) - self._head

    def isempty(self):
        return len(self) == 0

class ListQueue(ListQueueFakeDelete):
    def dequeue(self):
        item = self._L[self._head]
        self._head += 1
        if self._head > len(self._L)//2:
            self._L = self._L[self._head:]
            self._head = 0
        return item
```

::: incremental

- Use this data structure to support certain tree traversals

:::

## Creating a Tree

```{python}
class Tree:
    def __init__(self, L):
        iterator = iter(L)
        self.data = next(iterator)
        self.children = [Tree(c) for c in iterator]

    def _listwithlevels(self, level, trees):
        trees.append("  " * level + str(self.data))
        for child in self.children:
            child._listwithlevels(level + 1, trees)

    def __str__(self):
        trees = []
        self._listwithlevels(0, trees)
        return "\n".join(trees)

    def __eq__(self, other):
        return self.data == other.data and self.children == other.children

    def height(self):
        if len(self.children) == 0:
            return 0
        else:
            return 1 + max(child.height() for child in self.children)

    def __contains__(self, k):
        return self.data == k or any(k in ch for ch in self.children)

    def preorder(self):
        yield self.data
        for child in self.children:
            for data in child.preorder():
                yield data

    __iter__ = preorder

    def _postorder(self):
        node, childiter = self, iter(self.children)
        stack = [(node, childiter)]
        while stack:
            node, childiter = stack[-1]
            try:
                child = next(childiter)
                stack.append((child, iter(child.children)))
            except StopIteration:
                yield node
                stack.pop()                 

    def postorder(self):
        return (node.data for node in self._postorder())

    def _layerorder(self):
        node, childiter = self, iter(self.children)
        queue = ListQueue()
        queue.enqueue((node, childiter))
        while queue:
            node, childiter = queue.peek()
            try:
                child = next(childiter)
                queue.enqueue((child, iter(child.children)))
            except StopIteration:
                yield node
                queue.dequeue()                 

    def layerorder(self):
        return (node.data for node in self._layerorder())
```

::: incremental

- Offers a complete implementation along with traversals

:::

## Instantiating and Displaying a Tree

```{python}
T_simple = Tree([1, [2], [3, [4]]])
T_complex = Tree([1, [2, [3], [4]], [5],[6],[7,[8],[9], [10,[11]]]])
print(T_simple)
print(T_complex)
```

## Main methods in a `Tree` API

::: {.fragment .fade-right .boxed-content style="margin-top: 0em; font-size: 0.80em;"}

- `__init__(L)`: Initialize a new tree given a list of lists.

- `height()`: Return the height of the tree.

- `__str__()`: Return a string representing the entire tree.

- `__eq__(other)`: Return `True` if the tree is equal to `other`.

- `__contains__(k)`: Return `True` if and only if the tree contains the data
`k` either at the root or at one of its descendants.  Return `False` otherwise.

:::

::: incremental

- Leverage the same list of list as used for the primitive tree
- Methods that make trees easier to use (e.g., `__contains__`)
- The `height` method gives maximal depth of the tree

:::

## Traversal methods in a `Tree` API

::: {.fragment .fade-right .boxed-content style="margin-top: 0em; font-size: 0.80em;"}

- `preorder()`: Return an iterator over the data in the tree that yields values
according to the **pre-order** traversal of the tree.

- `postorder()`: Return an iterator over the data in the tree that yields
values according to the **post-order** traversal of the tree.

- `layerorder()`: Return an iterator over the data in the tree that yields
values according to the **layer-order** traversal of the tree.

- `__iter__()`: An alias for the default traversal, preorder.

:::

::: incremental

- Traversal methods offer different ways to "visit" nodes
- Different traversal methods visit nodes in different orders
- The `__iter__` method allows for iteration over the tree

:::

# Okay, let's explore the implementation details of the `Tree` class!

::: incremental

- Recursive constructor to build the tree structure
- "Double underscore" methods for Pythonic operations
- Traversal methods to access the data in the `Tree` instance

:::

## Understanding the `Tree` constructor

```python
class Tree:
    def __init__(self, L):
        iterator = iter(L)
        self.data = next(iterator)
        self.children = [Tree(c) for c in iterator]
```

::: {.fragment .fade-up style="font-size: 0.90em;"}

- The constructor uses an iterator to access the data
- The `data` attribute stores the current node's value
- The `children` attribute stores the children of current node
- Uses a list comprehension to create the children
- Accepts as input the *list of list* representation of the tree
  - Example: `[1, [2], [3, [4]]]`
  - The tree has root `1` with children `2` and `3`

:::

## Revising the `printtree` function

```{python}
def printtree(T):
    print(T.data)
    for child in T.children:
        printtree(child)

T = Tree(['a', ['b', ['c', ['d']]],['e',['f'], ['g']]])
printtree(T)
```

::: {.fragment .fade-right style="font-size: 0.90em;"}

- The `printtree` function now accepts a `Tree` instance
- Recursively prints the data stored in the tree nodes
- Intuitively, this performs a traversal of the tree

:::

## Visualizing the hierarchy of a `Tree`

```python
def __str__(self, level = 0):
    treestring = "  " * level + str(self.data)
    for child in self.children:
        treestring += "\n" + child.__str__(level + 1)
    return treestring
```

<p class="codespacer">

```{python}
T = Tree(['a', ['b', ['c', ['d']]],['e',['f'], ['g']]])
print(str(T))
```

::: {.fragment .fade-right style="font-size: 0.90em;"}

- The `__str__` method now accepts an optional `level` parameter
- Uses indentation to represent the hierarchy of the tree

:::

# Alternative methods for systematically visiting the nodes of a `Tree`?

::: fragment

- **Pre-order**: visit a node followed by its children
- **Post-order**: visit a node's children before the node
- **Layer-order**: visit all nodes on a level-by-level basis
- Make sure to review all remaining source code in the `Tree`!

:::

## Pre-order traversal of a `Tree`

```python
def preorder(self):
    yield self.data
    for child in self.children:
        for data in child.preorder():
            yield data

__iter__ = preorder
```

<p class="codespacer">

```{python}
T = Tree(['a', ['b', ['c', ['d']]],['e',['f'], ['g']]])
for node in T.preorder():
    print(node)
```

::: {.fragment style="font-size: 0.90em;"}

- Use `yield` to generate nodes according to pre-order approach

:::

## Post-order traversal of a `Tree`

```python
def _postorder(self):
    node, childiter = self, iter(self.children)
    stack = [(node, childiter)]
    while stack:
        node, childiter = stack[-1]
        try:
            child = next(childiter)
            stack.append((child, iter(child.children)))
        except StopIteration:
            yield node
            stack.pop()                 

def postorder(self):
    return (node.data for node in self._postorder())
```

::: {.fragment style="font-size: 0.90em;"}

- Use a `stack` structure to store nodes during traversal
- The public method calls the internal `_postorder` method
- Remember, method visits the children before the node itself!

:::

## Running the post-order traversal

```{python}
T = Tree(['a', ['b', ['c', ['d']]],['e',['f'], ['g']]])
for node in T.postorder():
    print(node)
print()
for node in T.preorder():
    print(node)
```

## Layer-order traversal of a `Tree`

```python
def _layerorder(self):
    node, childiter = self, iter(self.children)
    queue = ListQueue()
    queue.enqueue((node, childiter))
    while queue:
        node, childiter = queue.peek()
        try:
            child = next(childiter)
            queue.enqueue((child, iter(child.children)))
        except StopIteration:
            yield node
            queue.dequeue()                 

def layerorder(self):
    return (node.data for node in self._layerorder())
```

::: {.fragment style="font-size: 0.90em;"}

- Use a `ListQueue` structure to store nodes during traversal
- The public method calls the internal `_layerorder` method
- Remember, method visits the children at each level of tree!

:::

## Running the layer-order traversal

```{python}
T = Tree(['a', ['b', ['c', ['d']]],['e',['f'], ['g']]])
for node in T.layerorder():
    print(node)
print()
for node in T.preorder():
    print(node)
```
