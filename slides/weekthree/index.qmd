---
title: "Object-Oriented Programming in Python"
echo: true
description: "What are some of the key features of Python and how do we measure their performance?"
date: "2024-01-22"
date-format: long
author: Gregory M. Kapfhammer
format:
  revealjs:
    theme: default
    css: styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Algorithmology"
---

# What are the main goals of object-oriented programming?

::: incremental
- Write code that reflects thought and the world
- Enable code reuse and sharing among programmers
- Encourage the creation of well-designed software
- Ensure that software is easy to maintain and extend
:::

## Type Inference in Python

```{python}
mylist = []
print(type(mylist))
print(isinstance(mylist, list))
print(isinstance(mylist, str))
```

::: {.fragment .fade style="margin-top: 0.5em; font-size: 1em;"}

- `mylist = []` creates an empty list
- `type(mylist)` returns the type of the list
- `isinstance(mylist, list)` checks if `mylist` is a list
- Same approach works for other data types!

:::

## What are the performance trade-offs associated with checking to see if a collection contains a value?

::: {.fragment .fade-right}

- Questions to consider when designing an experiment:
  - Type of the collection?
  - Contents of the collection?
  - Size of the collection?
  - How often will the collection change?
  - How can we measure time and space overhead?

:::
