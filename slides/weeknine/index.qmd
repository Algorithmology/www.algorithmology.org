---
title: "Implementing Linked-Based Data Structures"
echo: true
description: "How do you design and implement linked-based data structures in Python?"
date: "2024-03-11"
date-format: long
author: Gregory M. Kapfhammer
execute:
  freeze: auto
format:
  revealjs:
    theme: default
    css: ../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    html-math-method: mathjax
    footer: "Algorithmology"
    mermaid:
      theme: default
---

# What is a linked list?

- Stores a sequential collection of elements
- Uses individual nodes to store data values
- Each node has a reference to the next node
- The first node is called the **head** and the last is the **tail**

```{python}
class ListNode:
    def __init__(self, data, link = None):
        self.data = data
        self.link = link
```

## Implementing a `LinkedList`

```{python}
class LinkedList:
    def __init__(self):
        self._head = None

    def addfirst(self, item):
        self._head = ListNode(item, self._head)

    def removefirst(self):
        item = self._head.data
        self._head = self._head.link
        return item
```

::: {.fragment style="margin-top: 0.5em"}

- A `LinkedList` contains an instance of `ListNode` in `_head`
- `addfirst` creates a new `ListNode` and updates `_head`
- `removefirst` updates `_head` and returns the data

:::

## Making a `Queue` with a `LinkedList`

```{python}
#| code-line-numbers: "|1-6|8-15|17-20|22-31|"
class LinkedList:
    def __init__(self):
        self._head = None

    def addfirst(self, item):
        self._head = ListNode(item, self._head)

    def addlast(self, item):
        if self._head is None:
            self.addfirst(item)
        else:
            currentnode = self._head
            while currentnode.link is not None:
                currentnode = currentnode.link
            currentnode.link = ListNode(item)

    def removefirst(self):
        item = self._head.data
        self._head = self._head.link
        return item

    def removelast(self):
        if self._head.link is None:
            return self.removefirst()
        else:
            currentnode = self._head
            while currentnode.link.link is not None:
                currentnode = currentnode.link
            item = currentnode.link.data
            currentnode.link = None
            return item

```
