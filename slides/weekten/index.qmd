---
title: "Recursion and Dynamic Programming"
echo: true
description: "How do you efficiently repeat operations?"
date: "2024-03-18"
date-format: long
author: Gregory M. Kapfhammer
execute:
  freeze: auto
format:
  revealjs:
    theme: default
    css: ../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    html-math-method: mathjax
    footer: "Algorithmology"
---

# Recursion means a "reference to self"!

- Implementation of recursion in Python language
- Mental model for how to think about recursive functions
- Use of recursion as a problem solving technique
- Analysis of the running time of recursive functions

## Recursive implementation of `sumk`

```{python}
def sumk(k):
    if k > 0:
        return sumk(k-1) + k
    return 0

print(sumk(1))
print(sumk(2))
print(sumk(3))
print(sumk(4))
print(sumk(5))
```

::: fragment

- The `sumk` function calls itself with a smaller value of `k`
- The base case stops the recursion when `k` is equal to `0`

:::

## Termination of recursive functions

::: fragment

- **How to ensure that a recursive function stops running?**

  - Base case stops the recursion by returning fixed value
  - Recursive case reduces the input towards the base case
  - Recursive calls are made of smaller sub-problems

- **What happens if the base case is not reached?**
  - The recursive function will enter an infinite recursion
  - Python limits adding recursive functions to call stack 
  - The program will ultimately raise the `RecursionError`

:::

## The call stack and recursion

```{python}
def sumsquarek(k):
    if k == 0:
        return 0
    else:
        return k ** 2 + sumsquarek(k - 1)

print(sumsquarek(1))  # Output: 1
print(sumsquarek(2))  # Output: 5
print(sumsquarek(3))  # Output: 14
print(sumsquarek(4))  # Output: 30
print(sumsquarek(5))  # Output: 55
```

::: {.fragment style="font-size: 0.9em; margin-top: -0.25em"}

- The `sumsquarek` function calls itself with a smaller value of `k`
- The base case stops the recursion when `k` is equal to `0`

:::
