---
title: "Graph Structures"
echo: true
description: "How do you represent and process graph structured data?"
date: "2024-04-22"
date-format: long
author: Gregory M. Kapfhammer
execute:
  freeze: auto
format:
  revealjs:
    theme: default
    css: styles.css
    monofont: Ubuntu Mono
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    html-math-method: mathjax
    footer: "Algorithmology"
---

# What is a graph? Why is it a useful structure?

::: incremental

- Mathematical object often used in computer science

- A graph is a pair $(V, E)$ where $V$ is any set of entities and $E$ is a set
of pairs of elements of $V$ 

- $V$ is called the **vertex set** and $E$ is the **edge set**

:::

::: {.fragment .fade}

{{< iconify game-icons team-idea >}} **Any examples of data we could store in a graph?**

:::

## Representing a primitive graph

```{python}
graph_one = {
    1: [2, 3, 4], 2: [], 3: [], 4: []
}

def add_edge(graph, node1, node2):
    if node1 in graph:
        graph[node1].append(node2)
    else:
        graph[node1] = [node2]

add_edge(graph_one, 2, 3)
print(graph_one)
```

<p class="codespacer">

```{python}
graph_two = ({1,2,3,4}, {(1,2), (1,3), (1,4)})
print(graph_two)
```

## Methods for a simple directed graph

::: {.fragment .fade-up .boxed-content style="margin-top: 0em; font-size: 0.725em;"}

  - `__init__(V, E)`: Initialize a new graph with vertex set `V` and edge set `E`
  - `vertices()`: Return an iterable collection of the vertices
  - `edges()`: Return an iterable collection of the edges
  - `addvertex(v)`: Add vertex to graph that is identified with the `v` object
  - `addedge(u, v)`: Add edge to graph between vertices with keys `u` and `v`
  - `removeedge(u,v)` : Remove the edge u,v from the graph
  - `__contains__(v)` : Return `True` if vertex `v` in graph; `False` otherwise
  - `hasedge(u,v)` : Return `True` if edge `(u,v)` in graph; `False` otherwise.
  - `nbrs(v)` : Return an iterable collection of (out)neighbors of `v`,
  i.e., those vertices `w` such that `(v, w)` is an edge. (For directed
  graphs, this is out-neighbors.)
  - `__len__()` : Return the number of vertices in the graph.

:::
