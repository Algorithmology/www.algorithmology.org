---
title: "Graph Structures"
echo: true
description: "How do you represent and process graph structured data?"
date: "2024-04-22"
date-format: long
author: Gregory M. Kapfhammer
execute:
  freeze: auto
format:
  revealjs:
    theme: default
    css: styles.css
    monofont: Ubuntu Mono
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    html-math-method: mathjax
    footer: "Algorithmology"
---

# What is a graph? Why is it a useful structure?

::: incremental

- Mathematical object often used in computer science

- A graph is a pair $(V, E)$ where $V$ is any set of entities and $E$ is a set
of pairs of elements of $V$ 

- $V$ is called the **vertex set** and $E$ is the **edge set**

:::

::: {.fragment .fade}

{{< iconify game-icons team-idea >}} **Any examples of data we could store in a graph?**

:::

## Representing a primitive graph

```{python}
graph_one = {
    1: [2, 3, 4], 2: [], 3: [], 4: []
}

def add_edge(graph, node1, node2):
    if node1 in graph:
        graph[node1].append(node2)
    else:
        graph[node1] = [node2]

add_edge(graph_one, 2, 3)
print(graph_one)
```

<p class="codespacer">

```{python}
graph_two = ({1,2,3,4}, {(1,2), (1,3), (1,4)})
print(graph_two)
```

## Methods for a simple directed graph

::: {.fragment .fade-up .boxed-content style="margin-top: 0em; font-size: 0.725em;"}

  - `__init__(V, E)`: Initialize a new graph with vertex set `V` and edge set `E`
  - `vertices()`: Return an iterable collection of the vertices
  - `edges()`: Return an iterable collection of the edges
  - `addvertex(v)`: Add vertex to graph that is identified with the `v` object
  - `addedge(u, v)`: Add edge to graph between vertices with keys `u` and `v`
  - `removeedge(u,v)` : Remove the edge u,v from the graph
  - `__contains__(v)` : Return `True` if vertex `v` in graph; `False` otherwise
  - `hasedge(u,v)` : Return `True` if edge `(u,v)` in graph; `False` otherwise.
  - `nbrs(v)` : Return an iterable collection of (out)neighbors of `v`,
  i.e., those vertices `w` such that `(v, w)` is an edge. (For directed
  graphs, this is out-neighbors.)
  - `__len__()` : Return the number of vertices in the graph.

:::

## Defining the `EdgeSetGraph` class

```{python}
class EdgeSetGraph:
    def __init__(self, V = (), E = ()):
        self._V = set()
        self._E = set()
        for v in V: self.addvertex(v)
        for u,v in E: self.addedge(u,v)

    def vertices(self):
        return iter(self._V)

    def edges(self):
        return iter(self._E)

    def addvertex(self, v):
        self._V.add(v)

    def addedge(self, u, v):
        self._E.add((u,v))

    def removeedge(self, u, v):
        self._E.remove((u,v))

    def __contains__(self, v):
        return v in self._V

    def hasedge(self, u, v):
        return (u,v) in self._E

    def nbrs(self, v):
        return (w for u,w in self._E if u == v)

    def __len__(self):
        return len(self._V)
```

::: incremental

- Represents a graph using a set of edges between vertices

:::

## Using an `EdgeSetGraph` instance

```{python}
graph = EdgeSetGraph()
graph.addvertex('A')
graph.addvertex('B')
graph.addvertex('C')
graph.addedge('A', 'B')
graph.addedge('B', 'C')

print('A' in graph)             # Output: True
print(graph.hasedge('A', 'B'))  # Output: True
print(list(graph.nbrs('B')))    # Output: ['C']
graph.removeedge('A', 'B')      # Remove edge
print(graph.hasedge('A', 'B'))  # Output: False
print(len(graph))               # Output: 3
```

::: incremental

- How to create an un-directed version of the `EdgeSetGraph`?

:::

## `UndirectedEdgeSetGraph` class

```{python}
class UndirectedEdgeSetGraph(EdgeSetGraph):
    def addedge(self, u, v):
        self._E.add(frozenset({u,v}))

    def removeedge(self, u, v):
        self._E.remove(frozenset({u,v}))

    def nbrs(self, v):
        for u, w in self._E:
            if u == v:
                yield w
            elif w == v:
                yield u
```

::: fragment

- `UnidirectedEdgeSetGraph` subclass of `EdgeSetGraph`
- Standard sets in Python do not support storing a `set`
- The `frozenset` is an immutable version of the `set`

:::

# Problems with the `EdgeSetGraph` class

- The `EdgeSetGraph` class is not efficient for large graphs
- Very slow to enumerate all edges incident to a vertex!

::: {.fragment .fade-up .boxed-content style="margin-top: 0em; font-size: 1em;"}

**Key insight**: To find the vertices that are incident to a given vertex, it
should not be necessary to go through all the edges! Alternatively, can we
store a set of neighbors for each vertex?

:::

## Creating `AdjacencySetGraph`

```{python}
class AdjacencySetGraph:
    def __init__(self, V = (), E = ()):
        self._V = set()
        self._nbrs = {}
        for v in V: self.addvertex(v)
        for e in E: self.addedge(*e)

    def vertices(self):
        return iter(self._V)

    def edges(self):
        for u in self._V:
            for v in self.nbrs(u):
                yield (u,v)

    def addvertex(self, v):
        self._V.add(v)
        self._nbrs[v] = set()

    def addedge(self, u, v):
        self._nbrs[u].add(v)

    def removeedge(self, u, v):
        self._nbrs[u].remove(v)

    def __contains__(self, v):
        return v in self._nbrs

    def nbrs(self, v):
        return iter(self._nbrs[v])

    def __len__(self):
      return len(self._nbrs)
```

::: fragment

- Now `nbrs` works with `return iter(self._nbrs[v])` 

:::

## Using `AdjacencySetGraph`

```{python}
G = AdjacencySetGraph({1,2,3}, {(1,2),(2,1),(1,3)})
print("Neighbors of 1:", list(G.nbrs(1)))
print("Neighbors of 2:", list(G.nbrs(2)))
print("Neighbors of 3:", list(G.nbrs(3)))
```

::: fragment

- Calling the `nbrs` method is now much faster!
- Direct access to the neighbors of a vertex
- Preserves same interface in the constructor
- Does not explicitly store edges of the graph

:::

::: {.fragment .fade style="margin-top: -.25em; font-size: 1em;"}

{{< iconify game-icons team-idea >}} **How could we implement the un-directed version?**

:::

## Enhanced `AdjacencySetGraph`

```{python}
class AdjacencySetGraphWithPath:
    def __init__(self, V = (), E = ()):
        self._V = set()
        self._nbrs = {}
        for v in V: self.addvertex(v)
        for e in E: self.addedge(*e)

    def vertices(self):
        return iter(self._V)

    def edges(self):
        for u in self._V:
            for v in self.nbrs(u):
                yield (u,v)

    def addvertex(self, v):
        self._V.add(v)
        self._nbrs[v] = set()

    def addedge(self, u, v):
        self._nbrs[u].add(v)

    def removeedge(self, u, v):
        self._nbrs[u].remove(v)

    def __contains__(self, v):
        return v in self._nbrs

    def nbrs(self, v):
        return iter(self._nbrs[v])

    def __len__(self):
      return len(self._nbrs)

    def hasedge(self, u, v):
        return v in self._nbrs[u]

    def ispath(self, V):
      return V and all(self.hasedge(V[i-1], V[i]) for i in range(1, len(V)))

    def issimplepath(self, V):
      return self.ispath(V) and len(V) == len(set(V))

    def iscycle(self, V):
        return self.ispath(V) and V[0] == V[-1]

    def issimplecycle(self, V):
        return self.iscycle(V) and self.issimplepath(V[:-1])
```

::: fragment

- Add `ispath`, `issimplepath`, `iscycle`, and `issimplecycle`

:::

## Using `AdjacencySetGraphWithPath`

```{python}
G = AdjacencySetGraphWithPath({1,2,3,4}, {(1,2),(3,1), (2,3), (3,4), (4,3)})
print("[1,2,3,1] is a path", G.ispath([1,2,3,1]))
print("[1,2,3,1] is a simple path", G.issimplepath([1,2,3,1]))
print("[1,2,3] is a simple path", G.issimplepath([1,2,3]))
print("[1,2,3] is a simple cycle:", G.issimplecycle([1,2,3]))
print("[1,2,3,1] is a simple cycle:", G.issimplecycle([1,2,3]))
print("[1,2,3,4] is a simple path:", G.issimplepath([1,2,3,4]))
print("[1,2,3,4] is a simple cycle:", G.issimplecycle([1,2,3,4]))
print("[1,2,3,4,3,1] is a cycle:", G.iscycle([1,2,3,4,3,1]))
print("[1,2,3,4,3,1] is a simple cycle:", G.issimplecycle([1,2,3,4,3,1]))
```
