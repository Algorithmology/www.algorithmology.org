---
title: "Priority Queues"
echo: true
description: "How do you support priority-oriented data access?"
date: "2024-04-15"
date-format: long
author: Gregory M. Kapfhammer
execute:
  freeze: auto
format:
  revealjs:
    theme: default
    css: styles.css
    monofont: Ubuntu Mono
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    html-math-method: mathjax
    footer: "Algorithmology"
---

# What is a priority queue? Why is it useful?

::: incremental

- Normally data items removed based on insertion order
- Now, data items are removed based on priority!
- Queue that supports priority-oriented data access
- Aim to have good performance for all key operations

:::

::: {.fragment .fade}

{{< iconify game-icons team-idea >}} **Any examples of data we should store in a priority queue?**

:::

## Main methods in a `PriorityQueue` API

::: {.fragment .fade-up .boxed-content style="margin-top: 0em; font-size: 0.80em;"}

- `insert(item, priority)`: Add `item` with the given `priority`.

- `findmin()` - Return the item with the minimum priority. If there are
multiple items with the minimum priority, ties may be broken arbitrarily.

- `removemin()` - Remove and return the item with the minimum priority. As with
the `findmin` method, ties are broken arbitrarily.

:::

::: incremental

- Use a list-based approach for a starting implementation
- Identify performance trade-offs when using a list
- Develop a new data structure called a `heap`
- Use the `heap` to support efficient priority queue operations

:::

## Using a `list` for a `PriorityQueue`

```{python}
class SimpleListPQ:
    def __init__(self):
        self._L = []

    def insert(self, item, priority):
        self._L.append((item, priority))

    def findmin(self):
        return min(self._L, key = lambda x : x[1])[0]

    def removemin(self):
        item, priority = min(self._L, key = lambda x : x[1])
        self._L.remove((item, priority))
        return item
```

::: fragment

- The variable `_L` is a `list` of tuples stored in `self`
- Each tuple stores an `item` and its `priority`
- Both `findmin` and `removemin` have $O(n)$ time complexity

:::

## Creating and using a `SimpleListPQ`

```{python}
pq = SimpleListPQ()

pq.insert('apple', 3)
pq.insert('banana', 1)
pq.insert('cherry', 2)

print(pq.findmin())    # Outputs: 'banana'
print(pq.removemin())  # Outputs: 'banana'
print(pq.findmin())    # Outputs: 'cherry'
```

::: {.fragment style="font-size: 0.85em;"}

- The first parameter to `insert` method is the `item`
- The second parameter to `insert` method is the `priority`
- The `findmin` method returns the item with minimum priority
- The `removemin` method removes and returns item with minimum priority

:::
