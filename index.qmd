---
title: Algorithmology
layout: full
toc: false
---

![](images/Algorithmology-Logo.svg){fig-align="center"}

## Welcome to an Adventure in Algorithm Analysis!

In addition to ensuring that the programs they implement are correct and
maintainable, algorithm engineers must confirm that their code is efficient. The
focus of this course --- called "algorithmology" for fun! --- is the study of
algorithms, with a concentration on both their correctness and efficiency. The
process of algorithmology requires the completion of tasks that leverage
knowledge and skills in both engineering and science. For instance, an algorithm
engineer needs to design, implement, and test data structures and algorithms and
then correctly integrate them into a working software system. However, an
algorithm engineer must also use the scientific method to analyze the efficiency
of both a software system's components and the system as a whole. This course
introduces learners to both empirical and analytical approaches to studying the
efficiency of algorithms, data structures, and the software systems that contain
them.

## Schedule

With the goal of enabling effective developer development, this web site
features a sixteen-week schedule filled with activities that support the
development of your professional and technical capacities in the field of
algorithm analysis. Although this site is best used by an on-campus learner in
the [Department of Computer and information
Science](https://www.cs.allegheny.edu/) at [Allegheny
College](https://www.allegheny.edu/), the resources and projects are all
publicly available. For instance, the following provides a list of the three
textbooks that developing developers use to hone their professional and
technical skills during sixteen weeks of personal growth:

 [Software Engineering at Google](https://abseil.io/resources/swe-book)

## Resources for an Adventure in Algorithmology

Interested in getting started on a developer development adventure? Begin here:

- The [sixteen-week course schedule](./schedule/index.qmd) offers detailed
insights into each step that learners should take to help them to develop as
developers, including a list of reading assignment and descriptions of various
projects.

- The [course syllabus](./syllabus/index.qmd) introduces the course and its
learning objectives and explains how on-campus learners will be assessed by the
course instructor.

- The [developer development blog](./syllabus/index.qmd) includes executive
summaries of all of the key professional and technical insights that students
learned when actively engaging with the content in **SE**, **FB**, and **DB**.
The blog also contains reports from the design, implementation, testing,
documentation, and deployment of two software projects. Read more to watch us
develop as developers!

## Wow, Python Source Code ... and its Output!

As you browse the resources on this site you will notice that it often contains
both Python source code and the output from running code. For instance, here is
the source code for a `duplicates` function that uses a double-nested `for` loop
to determine whether or not the `input_list` contains a duplicate `int` value.

```{python}
from typing import List
def duplicates(input_list: List[int]) -> bool:
    """Determine whether or not the input list contains a duplicate value."""
    n = len(input_list)
    for i in range(n):
        for j in range(n):
            if i != j and input_list[i] == input_list[j]:
                return True
    return False

# use assertions to confirm that duplicates
# works as expected; note that assert only
# produces output if the condition is False
assert(duplicates([1,2,6,3,4,5,6,7,8]))
assert(not duplicates([1,2,3,4]))
# display the output of the functions calls
# to show that the output appears inline
print(duplicates([1,2,6,3,4,5,6,7,8]))
print(not duplicates([1,2,3,4]))
```

Source code that appears at an top-most region of a page is available for use in
later sections of the document. For instance, the following code defines a new
`timetrials` function that can be used to time the `duplicates` function in a
doubling experiment. Wow, check it out! The output from running the following
function i

```{python}
from typing import Callable
import time

def timetrials(function: Callable, n: int, trials: int = 10) -> None:
    """Time a function with an input of size n for trials number of times."""
    totaltime = 0
    for _ in range(trials):
        start = time.time()
        function(list(range(n)))
        totaltime += time.time() - start
    print("average =%10.7f for n = %d" % (totaltime/trials, n))

# conduct a doubling experiment for a provided function
for n in [50, 100, 200, 400, 800, 1600, 3200]:
    timetrials(duplicates, n)
```


::: {.callout-note appearance="minimal" title="Algorithmology Community Resources"}

Interested in connecting with other like-minded algorithm engineers? Please join
the [Algorithmology Discord Server](https://discord.gg/phSQfB8bZx) and join the
conversation! If you are an on-campus learning at Allegheny College, you may
also join the [Allegheny College Computer Science Discord
Server](https://discord.gg/CS2h9kXzX6). Finally, if you are an on-campus
learner, then you may schedule a meeting with the course instructor during
office hours by visiting the [Course Instructor's Appointment
Scheduler](https://www.gregorykapfhammer.com/schedule/).

:::
