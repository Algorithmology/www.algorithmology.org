---
title: Searching and Sorting
description: "Learn How to Efficiently Process Data"
date: 2025-03-24
layout: full
toc: true
toc-expand: 3
---

## Exploration

- {{< iconify fa6-solid book-open size=18px >}} Read chapters 11 through 14 in
[A First Course on Data Structures in
Python](https://donsheehy.github.io/datastructures/)
- {{< iconify fa6-brands github size=18px >}} Explore algorithms that perform
searching and sorting in the `ds2` package of
[donsheehy/datastructures](https://github.com/donsheehy/datastructures/). Can
you add debugging statements to trace how these algorithms work? Can you prove
the worst-case time complexity of these algorithms?
- {{< iconify fa6-solid book size=18px >}} Review chapters to confirm that you
understand the worst-case time complexities

## Activities

- {{< iconify fa6-solid people-line size=18px >}} **Tuesday and Thursday**:
Searching and Sorting
  - Explore how to implement searching and sorting algorithms Python
  - Apply a new algorithmic paradigm called dynamic programming
  - Learn more about the `mergesort` and `quickselect` algorithms
  - Examine Python source code segments to illustrate key points
- {{< iconify fa6-solid diagram-project size=18px >}} **Friday**: Submit
algorithm engineering project five, start algorithm engineering project six, and
give presentations for the second algorithm all-hands session

## Project

### Goal

To build and use a Python program, called `lcsfinder`, that runs benchmarks to
study the performance of finding the longest common sub-sequence of data values

### Steps

- Click the link provided in Discord to get started on this project
- Review {{< iconify fa6-brands github size=18px >}} [Longest Common
Subsequence Finder](https://github.com/Algorithmology/lcs-finder-starter) as a
public reference repository
- Install the project's dependencies using `devenv` and/or `poetry`
- Follow the instructions to complete the project:
  - **Week 1**: Implement all of the modules in `lcsfinder`
  - **Week 2**: Design and conduct experiments and document experimental
  results
- Schedule [office hours](https://www.gregorykapfhammer.com/schedule/) if you
have questions

::: {.callout-note appearance="minimal" title="Student Insights" collapse="false"}
Students who completed this project shared these insights:

- "A key takeaway is that while a simple recursive implementation may seem
straightforward, it can lead to inefficient code with poor time complexity."
**Alish Chhetri**

- "In this project we learned about finding the longest common subsequence
(LCS). We evaluated our algorithm's performance by running a doubling
experiment. We explored a dynamic function and a recursive function, along with
a third that simply calculated the length of the computed LCS. Finally, we
compared the pros and cons of these different methods, revealing some surprising
results!" **Rebekah Rudd**

:::

## Slides

```{=html}
<iframe class="slide-deck" src="../../slides/weekeleven/"></iframe>
```

{{< iconify majesticons presentation-play size=18px >}} Full Screen: [Week Eleven: Searching and Sorting](../../slides/weekeleven/)
