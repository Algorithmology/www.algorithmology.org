---
author: [Hemani Alaparthi, Finley Banas, Faaris Cheema, Darius Googe, Anton Hedlund, Vivian Potts]
title: How does response time for append and concatenation scale with data size in mutable vs. immutable structures in a doubling experiment?
page-layout: full
categories: [post, doubling, lists, tuples]
date: "2025-02-21"
date-format: long
toc: true
---

# Overview

## Mutable vs Immutable Analysis

Our All Hands project focuses on the ways that immutable and mutable objects effect our codes run time and RAM usage.

## What We Know

The difference in space overhead when appending elements to mutable collections versus immutable structures comes down to how memory allocation and object copying work.

## What We Expect

### Mutable Collections 

We know mutable collections (such as list) are able to be chnaged using an append. These append operations manage memory dynamically by distrubing extra space between what is needed. This means you can append withoout reallocating memory each time. So we can expect the mutable collecton to be more memory efficient. 

Due to this process when that space does eventually fill up, we can expect the list to resize by distrubuting a larger block of memory. This process would include copying the existing elements to the new memory block. Since it doesn't have to resize each time we can also expect it to take less time.

### Immutable Collections

We know that immutable structures (such as tuples) do not support appends. Meaning we must use a "+=" to create a whole new object thst contains both the original and the appended elements. 

However, because we allocate memory for the entire sequence and copy all elements of the coefficient we can expect a higher memory cost since we must allocate a new memory block each time. We can expect that the time it wouldd take wold vary based on how long and short the tuple is.


# TODO: Functionality - Hemani

# Results

## Hemani (MacOS)

### Laptop Details

```cmd
Displaying System Information

╭───────────────────────────────────────────────────── System Information Panel ──────────────────────────────────────────────────────╮
│ ╭──────────────────┬──────────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │
│ │ System Parameter │ Parameter Value                                                                                              │ │
│ ├──────────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────┤ │
│ │ battery          │ 63.00% battery life remaining, 7:06:00 seconds remaining                                                     │ │
│ │ cpu              │                                                                                                              │ │
│ │ cpucores         │ Physical cores: 8, Logical cores: 8                                                                          │ │
│ │ cpufrequencies   │ Min: Unknown Mhz, Max: Unknown Mhz                                                                           │ │
│ │ datetime         │ 2025-02-17 21:40:39                                                                                          │ │
│ │ disk             │ Total: 228.27 GB, Used: 14.13 GB, Free: 90.49 GB, Percent: 13.5%                                             │ │
│ │ hostname         │ Hemanis-MacBook-Air.local                                                                                    │ │
│ │ memory           │ svmem(total=8589934592, available=1409531904, percent=83.6, used=3016491008, free=63717376,                  │ │
│ │                  │ active=1356316672, inactive=1307279360, wired=1660174336)                                                    │ │
│ │ platform         │ macOS-15.1.1-arm64-arm-64bit                                                                                 │ │
│ │ pythonversion    │ 3.11.9                                                                                                       │ │
│ │ runningprocesses │ 508                                                                                                          │ │
│ │ swap             │ Total: 8.00 GB, Used: 7.02 GB, Free: 0.98 GB, Percent: 87.8%                                                 │ │
│ │ system           │ Darwin                                                                                                       │ │
│ │ systemload       │ (3.953125, 3.2275390625, 2.65234375)                                                                         │ │
│ │ virtualenv       │ /Users/hemanialaparthi/Library/Caches/pypoetry/virtualenvs/systemsense-GfKbtxco-py3.11                       │ │
│ ╰──────────────────┴──────────────────────────────────────────────────────────────────────────────────────────────────────────────╯ │
╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
```

|                |    Container size = 1000    |    Container size = 5000    |
|----------------|--------------|--------------|--------------|--------------|
| Data Structure | Doubling (3) | Doubling (9) | Doubling (3) | Doubling (9) |
|----------------|--------------|--------------|--------------|--------------|
| List           |0.000070      |0.006552      |0.000011      |0.001267      |
| Nested List    |0.000213      |0.016261      |0.000046      |0.002966      |
| Tuple          |0.000069      |0.006025      |0.000006      |0.001146      |
| Nested Tuple   |0.000513      |0.040819      |0.000088      |0.007281      |


## Finley (Windows)
### TODO: Laptop Details

|                |    Container size = 1000    |    Container size = 5000    |
|----------------|--------------|--------------|--------------|--------------|
| Data Structure | Doubling (3) | Doubling (9) | Doubling (3) | Doubling (9) |
|----------------|--------------|--------------|--------------|--------------|
| List           |              |              |              |              |
| Nested List    |              |              |              |              |
| Tuple          |              |              |              |              |
| Nested Tuple   |              |              |              |              |

## Anton (MacOS)
### TODO: Laptop Details

|                |    Container size = 1000    |    Container size = 5000    |
|----------------|--------------|--------------|--------------|--------------|
| Data Structure | Doubling (3) | Doubling (9) | Doubling (3) | Doubling (9) |
|----------------|--------------|--------------|--------------|--------------|
| List           |              |              |              |              |
| Nested List    |              |              |              |              |
| Tuple          |              |              |              |              |
| Nested Tuple   |              |              |              |              |


## Summary Table

|                |    Container size = 1000    |    Container size = 5000    |
|----------------|--------------|--------------|--------------|--------------|
| Data Structure | Doubling (3) | Doubling (9) | Doubling (3) | Doubling (9) |
|----------------|--------------|--------------|--------------|--------------|
| List           |              |              |              |              |
| Nested List    |              |              |              |              |
| Tuple          |              |              |              |              |
| Nested Tuple   |              |              |              |              |

# TODO: Analysis - Faaris

### Tuple

### Nested Tuple

### list

### Nested List


# TODO: Conclussion - Faaris


# TODO: Take home points - Darius
