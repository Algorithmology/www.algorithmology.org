---
author: [Hemani Alaparthi, Duru Akbas, Williem Bennet, Faaris Cheema, Vivian Potts]
title: How does the runtime efficiency of linear search and balanced binary search tree (tree based approach) algorithms compare under varying dataset sizes and target element positions?
page-layout: full
categories: [post, linear search, binary search, binary search tree, search]
date: "2025-04-24"
date-format: long
toc: true
format:
    html:
        code-links:    
            - text: Github Repository
              icon: github
              href: https://github.com/hemanialaparthi/lvb
---

# Introduction

This study examines how `linear search`, `binary search`, and `balanced binary search tree (BST)` algorithms perform under varying conditions, specifically looking at:

1. How dataset size affects performance scaling
2. How target element position impacts search efficiency

## Motivation

Search algorithm selection significantly impacts application performance, particularly as datasets grow. While linear search offers simplicity with O(n) time complexity, binary search trees promise O(log n) efficiency when properly balanced. However, theoretical advantages don't always translate directly to real-world performance. This study systematically analyzes how these algorithms compare across different dataset sizes and when searching for targets located in different positions within the data structure, providing insights for optimal algorithm selection in practical applications. As datasets grow and performance requirements become more stringent, the choice between linear search, binary search, and tree-based approaches can significantly impact application responsiveness. This study aims to provide empirical data to guide these decisions.

# Method

For this experiment, we developed a benchmarking tool that allows for systematic comparison between search algorithms across different data structures. The tool measures execution time while controlling for:

1. Data structure type (unsorted list vs. binary search tree)
2. Search algorithm (linear search vs. BST search)
3. Dataset size (with automatic doubling between runs)
4. Target position (`beginning`, `middle`, `end`, `random`, or `nonexistent`)

## Approach

### Linear Search

```cmd
def linear_search(dataset: List[Any], target: Any) -> Optional[int]:
    """Perform a linear search on the dataset.

    Args:
        dataset: List to search through
        target: Element to search for

    Returns:
        int: Index of the target element, or None if not found
    """
    # Iterate through the dataset
    for i, item in enumerate(dataset):
        if item == target:
            return i

    # Target not found
    return None
```

Linear search sequentially checks each element until finding the target or reaching the end. It works on both sorted and unsorted data with `O(n)` time complexity.

### Binary Search

### Binary Search Tree

# Data

# TODO

# Results

# TODO

# Conclusion

# TODO

# Future Work

# TODO
