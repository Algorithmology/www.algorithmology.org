---
author: [Duru Akbas, Faaris Cheema, Hank Grefenstette, Kris Hatcher, Titus Smith]
title: What is the fastest method to build a Fibonacci sequence when considering recursive, iterative, and memoized approaches?
page-layout: full
categories: [post, fibonacci, recursive, memoization, iterative]
date: "2025-03-28"
date-format: long
toc: true
---

# Introduction

TODO: Complete introduction section

## Motivation

TODO: Complete motivation section

# Method

## Approach

### Generate Fibonacci using a Recursive approach

TODO: Duru- please explain your approach, including a code sample

### Generate Fibonacci using a Memoized approach

TODO: Titus- please explain your approach, including a code sample

### Generate Fibonacci using an Iterative approach

TODO: Faaris- please explain your approach, including a code sample

### Run a Benchmark

TODO: Hank- please explain your implementation of `main.py`, including a code sample

### Capture Results

TODO: Kris- please explain the timing implementation, including a code sample

## Benchmark Systems

In order to fully understand the results included below, here are basic explanations of the systems utilized by each team member to run the benchmarking executions.

### Duru Akbas

```cmd
TODO: include the output from `systemsense` on your own laptop
```

### Faaris Cheema

```cmd
TODO: include the output from `systemsense` on your own laptop
```

### Hank Grefenstette

```cmd
TODO: include the output from `systemsense` on your own laptop
```

### Kris Hatcher

```cmd
TODO: include the output from `systemsense` on your own laptop
```

### Titus Smith

```cmd
TODO: include the output from `systemsense` on your own laptop
```

## Raw Data

| Team Member | Test ID | Total Time 1  | Total Time 2  | Total Time 3  | Total Time 4  | Total Time 5  | Quantity | Approach    | Runs | Repeats |
| ----------- | :-----: | ------------: | ------------: | ------------: | ------------: | ------------: | -------: | ----------- | :--: | :-----: |
| Kris        | 1       | `0.000007939` | `0.000004894` | `0.000004733` | `0.000004759` | `0.000004612` |        7 | iterative   |   15 |       5 |
| Kris        | 2       | `0.000009761` | `0.000006870` | `0.000006566` | `0.000006590` | `0.000006498` |       14 | iterative   |   15 |       5 |
| Kris        | 3       | `0.000016060` | `0.000012943` | `0.000012595` | `0.000012636` | `0.000012612` |       28 | iterative   |   15 |       5 |
| Kris        | 4       | `0.000038688` | `0.000036637` | `0.000036162` | `0.000035837` | `0.000036156` |        7 | recursive   |   15 |       5 |
| Kris        | 5       | `0.001559516` | `0.001414167` | `0.000977878` | `0.000981816` | `0.001404749` |       14 | recursive   |   15 |       5 |
| Kris        | 6       | `0.971831807` | `0.979780404` | `0.958956857` | `0.983081094` | `0.961149388` |       28 | recursive   |   15 |       5 |
| Kris        | 7       | `0.000023861` | `0.000019831` | `0.000026261` | `0.000019497` | `0.000039703` |        7 | memoization |   15 |       5 |
| Kris        | 8       | `0.000047589` | `0.000042669` | `0.000042672` | `0.000042514` | `0.000042335` |       14 | memoization |   15 |       5 |
| Kris        | 9       | `0.000095549` | `0.000089448` | `0.000089613` | `0.000089699` | `0.000089412` |       28 | memoization |   15 |       5 |
| Duru        | 1       | `0.000017500` | `0.000005900` | `0.000006600` | `0.000005700` | `0.000005800` |        7 | iterative   |   15 |       5 |
| Duru        | 2       | `0.000012800` | `0.000008400` | `0.000008200` | `0.000008300` | `0.000008300` |       14 | iterative   |   15 |       5 |
| Duru        | 3       | `0.000021700` | `0.000014700` | `0.000014600` | `0.000014600` | `0.000014500` |       28 | iterative   |   15 |       5 |
| Duru        | 4       | `0.000065100` | `0.000060600` | `0.000080000` | `0.000079400` | `0.000058200` |        7 | recursive   |   15 |       5 |
| Duru        | 5       | `0.001597200` | `0.001814300` | `0.001933400` | `0.002276700` | `0.002061000` |       14 | recursive   |   15 |       5 |
| Duru        | 6       | `1.228925700` | `1.231213500` | `1.218425600` | `1.239988300` | `1.228814600` |       28 | recursive   |   15 |       5 |
| Duru        | 7       | `0.000032700` | `0.000024500` | `0.000024300` | `0.000024300` | `0.000024200` |        7 | memoization |   15 |       5 |
| Duru        | 8       | `0.000056500` | `0.000050100` | `0.000049900` | `0.000049800` | `0.000049700` |       14 | memoization |   15 |       5 |
| Duru        | 9       | `0.000112400` | `0.000103400` | `0.000103300` | `0.000105800` | `0.000106300` |       28 | memoization |   15 |       5 |
| Titus       | 1       | `0.000019300` | `0.000010300` | `0.000010300` | `0.000011400` | `0.000010200` |        7 | iterative   |   15 |       5 |
| Titus       | 2       | `0.000021900` | `0.000012300` | `0.000012000` | `0.000012000` | `0.000012000` |       14 | iterative   |   15 |       5 |
| Titus       | 3       | `0.000029400` | `0.000021100` | `0.000020900` | `0.000020800` | `0.000020800` |       28 | iterative   |   15 |       5 |
| Titus       | 4       | `0.000095900` | `0.000103300` | `0.000157100` | `0.000095700` | `0.000095900` |        7 | recursive   |   15 |       5 |
| Titus       | 5       | `0.002238000` | `0.002300000` | `0.002246700` | `0.003815000` | `0.002587200` |       14 | recursive   |   15 |       5 |
| Titus       | 6       | `2.014577300` | `1.994848800` | `1.730349900` | `1.490137900` | `1.495413900` |       28 | recursive   |   15 |       5 |
| Titus       | 7       | `0.000045400` | `0.000038200` | `0.000037800` | `0.000037700` | `0.000037800` |        7 | memoization |   15 |       5 |
| Titus       | 8       | `0.000234000` | `0.000093900` | `0.000076800` | `0.000076700` | `0.000083500` |       14 | memoization |   15 |       5 |
| Titus       | 9       | `0.000225300` | `0.000178000` | `0.000190900` | `0.000207500` | `0.000186000` |       28 | memoization |   15 |       5 |
| Faaris      | 1       | `0.000005459` | `0.000003375` | `0.000003333` | `0.000003375` | `0.000003458` |        7 | iterative   |   15 |       5 |
| Faaris      | 2       | `0.000006417` | `0.000004792` | `0.000004667` | `0.000004625` | `0.000004667` |       14 | iterative   |   15 |       5 |
| Faaris      | 3       | `0.000011708` | `0.000009583` | `0.000009458` | `0.000009417` | `0.000009417` |       28 | iterative   |   15 |       5 |
| Faaris      | 4       | `0.000029792` | `0.000028333` | `0.000028250` | `0.000028250` | `0.000028250` |        7 | recursive   |   15 |       5 |
| Faaris      | 5       | `0.000836375` | `0.000827333` | `0.000827167` | `0.000815375` | `0.000826083` |       14 | recursive   |   15 |       5 |
| Faaris      | 6       | `0.680736667` | `0.680154208` | `0.686455833` | `0.688156375` | `0.688603167` |       28 | recursive   |   15 |       5 |
| Faaris      | 7       | `0.000018125` | `0.000015250` | `0.000015208` | `0.000015209` | `0.000015208` |        7 | memoization |   15 |       5 |
| Faaris      | 8       | `0.000033708` | `0.000030709` | `0.000030666` | `0.000033584` | `0.000030541` |       14 | memoization |   15 |       5 |
| Faaris      | 9       | `0.000065333` | `0.000061375` | `0.000061125` | `0.000061250` | `0.000061250` |       28 | memoization |   15 |       5 |
| Hank        | 1       | `0.000011800` | `0.000007160` | `0.000006860` | `0.000006830` | `0.000006810` |        7 | iterative   |   15 |       5 |
| Hank        | 2       | `0.000015200` | `0.000010900` | `0.000010700` | `0.000010500` | `0.000010500` |       14 | iterative   |   15 |       5 |
| Hank        | 3       | `0.000028900` | `0.000022700` | `0.000022400` | `0.000022300` | `0.000022200` |       28 | iterative   |   15 |       5 |
| Hank        | 4       | `0.000087600` | `0.000049300` | `0.000049500` | `0.000049400` | `0.000049200` |        7 | recursive   |   15 |       5 |
| Hank        | 5       | `0.002000000` | `0.002000000` | `0.002000000` | `0.001000000` | `0.001000000` |       14 | recursive   |   15 |       5 |
| Hank        | 6       | `1.350000000` | `1.330000000` | `1.350000000` | `1.310000000` | `1.280000000` |       28 | recursive   |   15 |       5 |
| Hank        | 7       | `0.000040700` | `0.000033500` | `0.000033200` | `0.000033100` | `0.000033000` |        7 | memoization |   15 |       5 |
| Hank        | 8       | `0.000079000` | `0.000070700` | `0.000070300` | `0.000089700` | `0.000061100` |       14 | memoization |   15 |       5 |
| Hank        | 9       | `0.000100000` | `0.000100000` | `0.000100000` | `0.000100000` | `0.000100000` |       28 | memoization |   15 |       5 |

# Charts

TODO: include charts, if necessary

# Results

TODO: outline results

# Next Steps

TODO: outline suggested next steps

# References

These references were utilized during the creation of the experimental harness used to generate the empirical data referenced in this write-up.

TODO: include references
