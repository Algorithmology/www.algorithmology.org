---
author: [Keller Liptrap, Alish Chhetri, Ochirsaikhan Davaajambal, Tugi Gantulga, Miles Franck, Nicholas Ingerson-Meacham]
title: Investigating the efficiency of using string prefixes to detect duplicate genes
page-layout: full
categories: [post, objects, lists]
date: "2024-03-22"
date-format: long
toc: true
---

## What we have to do

This algorithm all-hands assignment invites you to complete the following steps:

Meet in your assigned groups to discuss your assigned function from the mid-term examination.
Share and present to the other members of your team the source code that you implemented.
Discuss with your team members the likely runtimes and running times of your implementations.
Specify, design, and implement a benchmarking framework that supports the experimental evaluation of the functions that you and your team members implemented as a part of the mid-term examination.
Write and publish on the course web site a blog post that explains (a) the runtime results from your experimental study with the benchmarking framework that you implemented and (b) the running time results from an analytical evaluation that you independently conducted. Your blog post should clearly articulate (a) whether or not the experimental and analytical results for your function are in alignment with each other, (b) what is most likely to be the realistic runtime and true running time of your function, and (c) why you judge that your function has this runtime and running time, (d) which function from among those implemented by your team members is the fastest, and (e) why this single implementation proved to be the fastest among all of the solutions.
Present your findings to the entire class during the following week of the academic semester during the follow-on algorithm all-hands session.
Please note that all of the work that you complete for this assignment should be published to the course web site. Your team must create and contribute to a pull request on the course web site's GitHub repository and ensure that your work is reviewed, revised, and published in advance of the Friday class session next week.

## Please provide a paragraph that explains your code and provides a time complexity in big O notation

### Alish

```python
def compare_gene_prefix_alish(gene: Gene, other_gene: Gene) -> bool:
    """Compare the prefix of the gene name with the prefix of another gene name."""
    # TODID: extract the prefix from the gene name
    # TODID: compare the prefix to the prefix of the other gene name
    # TODID: return a boolean value that indicates whether or not the prefixes are equal
    # TODID: refer to the function specification for more details about this function
    return (
        gene.gene_name[: gene.gene_name_prefix]
        == other_gene.gene_name[: other_gene.gene_name_prefix]
    )


def detect_duplicates_gene_alish(data: List[Gene]) -> bool:
    """Detect whether or not there are duplicate values in a list of Gene values."""
    # TODID: provide an implementation of this function that can determine
    # whether or not the provided list of Gene values contains duplicates
    if not data:
        return False
    for i in range(len(data)):
        for j in range(i + 1, len(data)):
            if compare_gene_prefix_alish(data[i], data[j]):
                return True
    return False
```

TODO: Write paragraph that explains your code and provides a time complexity in big O notation

### Miles

```python
TODO: add code here
```

TODO: Write paragraph that explains your code and provides a time complexity in big O notation

### Keller

```python
TODO: Add code here
```

TODO: Write paragraph that explains your code and provides a time complexity in big O notation

### Tugi

```python
def detect_duplicates_gene(data):
    """Detect whether or not there are duplicate values in a list of Gene values."""
    gene_map = {}

    for gene_object in data:
        if gene_object.gene_name_prefix in gene_map:
            return True
        else:
            gene_map[gene_object.gene_name_prefix] = 1

    return False
```

O(N) due to one for loop when iterating the data.
RunTime: x seconds.

This code above utilizes a hashmap and counts the number of the genes it finds. If there is more than one found, then 
it will immediately give True!

TODO: Write paragraph that explains your code and provides a time complexity in big O notation

### Ochirsaikhan

```python
TODO: Add code here
```

TODO: Write paragraph that explains your code and provides a time complexity in big O notation

### Nic

```python
TODO: add code here
```

TODO: Write paragraph that explains your code and provides a time complexity in big O notation
