---
author: [Miles Franck, Aidan Dyga, Nicholas Ingerson-Meacham, Simon Jones, Pallas-Athena Cain, Jason Gyamfi]
title: How does a container's memory overhead influence the time efficiency of containment checking?
page-layout: full
categories: [post, containment checking, lists]
date: "2024-02-16"
date-format: long
toc: true
---

# Introduction

When programming in Python each object created takes up a specific amount of space on the computer which is measured in bytes. The objects themselves hold their names as well as their properties. In the `containmentcheck` program we are looking in particular at container objects that also store the values inside of them, sometimes pointer values. In this post, we will be experimenting to see how much of an impact the size of an object has on the time efficiency of the `containmentcheck` program.

## Motivation

As society’s programs get more complex, computer memory is becoming an increasingly more valuable resource. When programming it is important to consider how the type of objects you use will impact your program’s performance. The goal of our experiments is to look at how the size of the container impacts the amount of space a program takes up and whether or not that causes an increase or decrease in the speed of the program's runtime itself.

# Method

## Part One

For the first part of our experiment, we compared the runtimes of the 3 types of containers used in our `containmentcheck` program, the list, tuple, and set. We used the `sys.getsizeof()` function to find the size, in bytes, of the current container.

Here is an example of using the `sys.getsizeof()` function:
TODO: check that this example code works
```{
import sys

list_example = [10, 2.0, "cat"]
tuple_example = (10, 2.0, "cat")
set_example = set([10, 2.0, "cat"])

print(sys.getsizeof(list_example))
print(sys.getsizeof(tuple_example))
print(sys.getsizeof(set_example))
}```

As you can see in the following charts, when the container size increases, so does the number of bytes it takes up. This experiment was run at a container size of 10000,  1000000, and 100000000.

The results are as follows:

TODO: ADD MD DATA CHARTS FROM EVERYONE

Result from running on WSL2

| Approach | Container Size | Maximum values | Total Time for 10 runs| Average Time for 10 runs| Size in Bytes|
|:--------:|:--------------:|:--------------:|:-----:|:-----:|:-----:|
|   list   |   10000   |     100000   | [0.0012522619999799645, 0.0012322780003160005, 0.0011758390010072617]  | [0.00012522619999799645, 0.00012322780003160005, 0.00011758390010072617]  | 85176  |
|   tuple   |   10000   |     100000   | [0.0006548499986820389, 0.0006511610008601565, 0.0006510949988296488]  | [6.548499986820388e-05, 6.511610008601565e-05, 6.510949988296489e-05] | 80040  |
|   set   |   10000  |     100000   | [0.004011396000350942, 0.0035747010006161872, 0.003517425999234547]  | [0.0004011396000350942, 0.00035747010006161874, 0.0003517425999234547]  | 85176  |
|  list   |   1000000   |     100000    | [0.10512661299981119, 0.10005645099954563, 0.13408000599883962]  | [0.01051266129998112, 0.010005645099954562, 0.013408000599883962]  | 8448728  |
|  tuple   |   1000000   |     100000   | [0.22520549799992295, 0.08570071100075438, 0.14284700400094152] | [0.022520549799992295, 0.008570071100075438, 0.014284700400094153]  | 8000040  |
|  set   |   1000000   |     100000   | [1.0035714010009542, 0.5476638039999671, 0.5286222340000677]  | [0.10035714010009542, 0.054766380399996706, 0.05286222340000677]  | 8448728  |
|   list   |   100000000   |     100000   | [11.542406832999404, 10.57156037599998, 10.508643252998809]  |[1.1542406832999403, 1.057156037599998, 1.0508643252998808]  | 835128600  |
|   tuple    |   100000000   |     100000   |[9.33974368499912, 8.946416168999349, 8.583650802000193]  | [0.9339743684999121, 0.8946416168999349, 0.8583650802000193]  | 800000040  |
|   set    |   100000000   |     100000   | [104.86943111599976, 87.68656122200082, 102.34969667100086] | [10.486943111599976, 8.768656122200081, 10.234969667100085]  | 835128600 |

Result from running on Ubuntu 22.04.3 (Nic)

| Approach | Container Size | Maximum values | Total Time| Average Time | Size in Bytes|
|:--------:|:--------------:|:--------------:|:-----:|:-----:|:-----:|
|   list   |   10000   |     100000   | [0.001192513998830691, 0.0010130360024049878, 0.0009344440186396241]  | [0.0015412909851875156, 0.001560163014801219, 0.0015126089856494218]  | 85176  |
|   tuple   |   10000   |     100000   | [0.0012552789994515479, 0.0014613780076615512, 0.0020841840014327317]  | [0.0012978230079170316, 0.0010125469998456538, 0.0009343690180685371]  | 85176  |
|   set   |   10000  |     100000   | [0.0005832040042150766, 0.0005597549898084253, 0.0006302350084297359]  | [0.001104296010453254, 0.0009703560208436102, 0.0012992379779461771]  | 85176  |
|  list   |   1000000   |     100000  | [0.0019346769840922207, 0.0017107540043070912, 0.0021160060132388026] | [0.005761000997154042, 0.006385095010045916, 0.0054839410004206]  | 800984  |
|  tuple   |   1000000   |     100000   | [0.011105402983957902, 0.010886443982599303, 0.010710987000493333]  | [0.0035798909957520664, 0.0032940809905994684, 0.0030798889929428697]  | 800984  |
|  set   |   1000000   |     100000   | [0.006582016008906066, 0.006725382001604885, 0.006269895995501429]  | [0.012021547998301685, 0.013929145003203303, 0.014128198003163561]  | 800984  |
|   list   |   100000000   |     100000   | [0.010406941000837833, 0.011317726981360465, 0.010900419991230592]  | [0.002243519003968686, 0.0022710399935021996, 0.0021420849952846766]  | 89095160  |
|   tuple    |   100000000   |     100000   | [0.0505976119893603, 0.07865747500909492, 0.057329992996528745]  | [0.04424373700749129, 0.04353678101324476, 0.044995563017437235]  | 89095160  |
|   set    |   100000000   |     100000   | [0.025315645994851366, 0.025862612994387746, 0.02872514200862497]  | [0.017021469015162438, 0.016108676994917914, 0.01653495998471044]  | 89095160  |


The following graphs show that for all three container types, there is a positive correlation between the size of the container and the amount of time it takes to process. Despite having different sizes in bytes, tuples and lists have nearly the same performance with tuples performing slightly better overall. Lists are larger containers but from the results, their size increase does not exactly correlate to the process speed. Sets have the same byte size as lists do but provide much slower results. The following scatter plots demonstrate the time versus the bytes. As you can see, lists are slightly slower than tuples but not by the same margin of the set's slower speed. This case makes it appear that the size in bytes did not cause as much of an impact to the program as did the type of the container itself.

TODO: INSERT THE SCATTER PLOTS

However, this does not explain the entirety of the picture of how bytes impact runtime. To get a better understanding of the relationship we can look at the program’s overall memory usage.

## Part Two

Memory usage can be difficult to measure in Python in particular. Because Python automatically allocates memory for objects behind the scenes it can be tricky to know exactly what is happening (Turner-Trauring, 2021).

There are three main cases where our containers may be stored. They can be stored in either RAM, the disk (swap), or both (Turner-Trauring, 2021). As a fourth option, the program may not be even stored at all.
For the main three cases, the number of processes running in the background will decide where it is stored. For example, if there are a lot of browser tabs being run in the background the computer will likely switch things over to using the disk memory or swap. This is our resident memory usage.

TODO: INCLUDE PART ABOUT TRACEMALLOC

# Results

TODO:

# Slides

TODO:

# Source Code Examples

TODO:

# References

[1] Itamar Turner-Trauring, “Measuring memory usage in Python: it’s tricky!,” Python⇒Speed, Jun. 21, 2021. https://pythonspeed.com/articles/measuring-memory-python/#:~:text=In%20Python%20 (accessed Feb. 11, 2024).
‌[2] Itamar Turner-Trauring, “Easy Python memory profiling for data scientists and scientists with Fil,” Python⇒Speed, 2023. https://pythonspeed.com/fil/ (accessed Feb. 11, 2024).



