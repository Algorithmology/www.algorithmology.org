---
author: [Rosa Ruiz, Anoop Guragain, Hank Grefenstette, Gabriel Salvatore, Kris Hatcher]
title: Does the type of container used to hold strings affect the speed of string equality comparisons?
page-layout: full
categories: [post, equality comparison, lists, dictionaries, sets]
date: "2025-02-21"
date-format: long
toc: true
---

# Introduction

Comparing two string objects to determine equality is a common operation within computer programming. In this post, we will perform a series of experiments to discover if different containers influence the speed of equality comparisons, specifically comparing a value against all of the values within the container. We will the review the experimental results to arrive at an empirical conclusion about the impact of container types on string equality comparison operations.

## Motivation

Given the prevalence of comparison operations within computer programming, especially comparisons where a given value is being compared against values in a container, we felt that the processing speed implications of different container types would be a beneficial data point for computer programmers to have as they made implementation decisions throughout their work. When deciding on a specific architecture, having clear data about container types' impact on equality checking would provide beneficial information to help in container type selection.

# Method

## Approach

_code blocks, with descriptions of logic, go here_

## Data

_data tables go here_

# Results

# References

These references were utilized during the creation of the experimental harness used to generate the empirical data referenced in this write-up.

* <https://stackoverflow.com/questions/48510512/python-comparing-value-to-an-element-of-list-of-lists/>
* <https://stackoverflow.com/questions/3860009/custom-comparison-for-built-in-containers/>
* [ChatGPT](https://chatgpt.com/) : Used for information about the comparison of a value against elements in a container and also the use of `isInstance()` to check the type of container.
* [Copilot](https://github.com/features/copilot)
   * Used for debugging the code with 'Fix with Copilot'.
   * Used to generate the function signature type annotations in order to meet the class expectations.
* [Grammarly](https://app.grammarly.com): an AI assistant that helps me with spelling and grammar errors. Used in comments.
* [educative](https://www.educative.io/answers/what-is-asciilowercase-constant-in-python): Used to understand the module utilized to generate random strings, specifically `import string;`.
